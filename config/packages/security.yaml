security:
  # https://symfony.com/doc/current/security.html#registering-the-user-hashing-passwords
  password_hashers:
    App\Entity\Users: 'auto'

  role_hierarchy:
    ROLE_ADMIN: [ ROLE_USER, ROLE_ALLOWED_TO_SWITCH ]

    Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: 'auto'
  # https://symfony.com/doc/current/security.html#loading-the-user-the-user-provider
  providers:
    # used to reload user from session & other features (e.g. switch_user)
    app_user_provider:
      entity:
        class: App\Entity\Users
        property: username
  firewalls:
    dev:
      pattern: ^/(_(profiler|wdt)|css|images|js)/
      security: false
    main:
      access_denied_handler: App\Security\AccessDeniedHandler
      lazy: true
      provider: app_user_provider
      logout:
        path: app_logout
        target: app_login
      # https://symfony.com/doc/current/security/impersonating_user.html
      switch_user: true

      form_login:
        # "app_login" is the name of the route created previously
        login_path: app_login
        check_path: app_login
        enable_csrf: true
      custom_authenticator: App\Security\LoginAuthenticator
#        default_target_path: app_accueil
#        always_use_default_target_path: false
#        use_referer: true

        # activate different ways to authenticate
        # https://symfony.com/doc/current/security.html#the-firewall

  # Easy way to control access for large sections of your site
  # Note: Only the *first* access control that matches will be used
  access_control:
    - { path: ^/admin, roles: ROLE_ADMIN }
    - { path: ^/etudiant, roles: ROLE_ETUDIANT }
    - { path: ^/enseignant, roles: ROLE_ENSEIGNANT }

when@test:
  security:
    password_hashers:
      # By default, password hashers are resource intensive and take time. This is
      # important to generate secure password hashes. In tests however, secure hashes
      # are not important, waste resources and increase test times. The following
      # reduces the work factor to the lowest possible values.
      Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
        algorithm: auto
        cost: 4 # Lowest possible value for bcrypt
        time_cost: 3 # Lowest possible value for argon
        memory_cost: 10 # Lowest possible value for argon

services:
  App\Twig\AppExtension:
    arguments:
      - '@App\Classes\DataUserSession'
    tags:
      - { name: twig.extension }
